# -*- coding: utf-8 -*-
#
# This file is part of Bika LIMS
#
# Copyright 2011-2016 by it's authors.
# Some rights reserved. See LICENSE.txt, AUTHORS.txt.

from AccessControl import ClassSecurityInfo
from Products.Archetypes.BaseObject import BaseObject
from Products.Archetypes.Field import Field, StringField
from Products.CMFCore.utils import getToolByName
from Products.ZCatalog.interfaces import ICatalogBrain
from bika.lims import logger
from bika.lims.interfaces.field import IUIDReferenceField
from plone.api.portal import get_tool
from zope.interface import implements


class ReferenceException(Exception):
    pass


def is_uid(context, value):
    """Checks that the string passed is a valid UID of an existing object
    """
    uc = getToolByName(context, 'uid_catalog')
    brains = uc(UID=value)
    return brains and True or False


def is_brain(brain_or_object):
    """Checks if the passed in object is a portal catalog brain
    """
    return ICatalogBrain.providedBy(brain_or_object)


def is_at_content(brain_or_object):
    """Checks if the passed in object is an AT content type
    """
    return isinstance(brain_or_object, BaseObject)


class UIDReferenceField(StringField):
    """A field that stores References as UID values.
    """
    _properties = Field._properties.copy()
    _properties.update({
        'type': 'uidreference',
        'default': '',
        'default_content_type': 'text/plain',
        'relationship': '',
    })

    implements(IUIDReferenceField)

    security = ClassSecurityInfo()

    @security.public
    def get_object(self, instance, value):
        """Resolve a UID to an object.
        """
        if not value:
            return None
        elif is_at_content(value):
            return value
        else:
            try:
                uc = getToolByName(instance, 'uid_catalog')
            except AttributeError:
                # Sometimes an object doesn't have an acquisition chain,
                # in these cases we just hope that get_tool's call to
                # getSite doesn't fuck up.
                uc = get_tool('uid_catalog')
            brains = uc(UID=value)
            if brains:
                return brains[0].getObject()
            logger.error("%s.%s: Resolving UIDReference failed for %s (drop)" %
                         instance, self.getName(), value)

    @security.public
    def get_uid(self, instance, value):
        """Takes a brain or object (or UID), and returns a UID.
        """
        # Empty string or list with single empty string, are commonly
        # passed to us from form submissions
        if not value or value == ['']:
            ret = ''
        elif is_brain(value):
            ret = value.UID
        elif is_at_content(value):
            ret = value.UID()
        elif is_uid(instance, value):
            ret = value
        else:
            raise ReferenceException("%s.%s: Cannot resolve UID for %s" %
                                     (instance, self.getName(), value))
        return ret

    @security.public
    def get(self, instance, **kwargs):
        """Grab the stored value, and resolve object(s) from UID catalog.
        """
        value = StringField.get(self, instance, **kwargs)
        if self.multiValued:
            ret = filter(
                lambda x: x, [self.get_object(instance, uid) for uid in value])
        else:
            ret = self.get_object(instance, value)
        return ret

    @security.public
    def getRaw(self, instance, aslist=False, **kwargs):
        """Grab the stored value, and return it directly as UIDs.
        """
        value = StringField.get(self, instance, **kwargs)
        if aslist and not self.multiValued:
            value = [value]
        return value

    @security.public
    def set(self, instance, value, **kwargs):
        """Accepts a UID, brain, or an object (or a list of any of these),
        and stores a UID or list of UIDS.
        """
        if self.multiValued:
            if type(value) not in (list, tuple):
                value = [value, ]
            ret = [self.get_uid(instance, val) for val in value]
        else:
            # Sometimes we get given a list here with an empty string.
            # This is generated by html forms with empty values.
            # This is a single-valued field though, so:
            if isinstance(value, list):
                # len(value)==0 case is handled in get_uid below
                if len(value) == 1:
                    value = value[0]
                elif len(value) > 1:
                    logger.warning(
                        "Found values '\'{}\'' for singleValued field {}.{}. "
                        "Using only the first value in the list.".format(
                            '\',\''.join(value),
                            instance.absolute_url(),
                            self.getName()))
                    value = value[1]
            ret = self.get_uid(instance, value)
        StringField.set(self, instance, ret, **kwargs)
